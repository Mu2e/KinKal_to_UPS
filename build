#! /bin/bash
#
# 
#
#


usage() {
echo "

Build, install and clean the KinKal ups product.
The source directory and build directories will be created in the cwd.

usage: build <options>

    -b build code
    -C clean up working directories
    -c VALUE cmake version and qualifiers
    -i install as a product in $PRODUCTDIR/KinKal/$UPSVERSION
    -j VALUE maximum number of build threads
    -r VALUE root version and qualifiers
    -t run the tests
    -v GITVERSION ( name of the git tag )
    -V make this script verbose
    -d PRODUCTDIR
    -h print this help

"
}

checkConfiguration(){
  if [[ -z "$DOBUILD" && -z "$DOINSTALL" && -z "$DOCLEAN" ]]; then
    echo "ERROR - no actions requested"
    return 1
  fi

  if [[ -n "$DOINSTALL" && -z "$GITVERSION" ]]; then
    echo "You must supply a version when requesting an install."
  fi

  return 0
}


# Fetch the code to be built.  If no version is specified, build the head.
getCode() {
  echo "

  Begin clone and checkout for KinKal tag $GITVERSION

"
  git clone git@github.com:KFTrack/KinKal.git
  if [[ "$?" != "0" ]]; then
     return 1
  fi
  cd KinKal
  if [[ -n "$GITVERSION" ]]; then
    git checkout -b ${GITVERSION}_build_branch ${GITVERSION}
    if [[ "$?" != "0" ]]; then
       return 2
    fi
  fi

  # Report the commit to be  built
  git log -n 1 --decorate=full | cat  # Need the pipe cat or it will pipe to less
  git status

  cd ..
  return 0
}

clean(){
  echo "

  Begin clean up.

"
  for dir in KinKal build_prof build_debug; do
    if [[ -d ${dir} ]]; then
      echo "Removing " ${dir}
      /bin/rm -rf ${dir}
    fi
  done
}


install() {

  echo "

   Begin install.

"

  # Translate git version style to UPS version style.
  local UPSVERSION=`echo $GITVERSION | sed 's/v//'  |sed 's/\./ /g' |awk '{printf ("v%2.2d_%2.2d_%2.2d", $1, $2, $3)}'`

  # Form the UPS Flavor-qualifer managled directory names; match the ones from root.
  setup -B root $ROOTBASEVER
  local FQP=`echo $SETUP_ROOT | awk '{print $4"-"$8}' | sed 's/:/-/g'`
  local FQD=`echo $FQP | sed 's/prof/debug/'`
  unsetup root

  # Create directories
  local DD=$PRODUCTDIR/$PRODUCT/$UPSVERSION
  local DU=$DD/ups
  local DV=$PRODUCTDIR/$PRODUCT/${UPSVERSION}.version

  echo "Will install in $DD"

  echo $DV
  echo $DU
  echo $FQP
  echo $FQD

  # Make the ups directory structure
  if  ! mkdir -p $DD  ; then
    echo "ERROR - failed to make release dir $DD"
    return 1
  fi
  mkdir -p $DV
  mkdir -p $DU
  mkdir -p $DD/$FQP
  mkdir -p $DD/$FQD
  mkdir -p $DD/source
  mkdir -p $DD/include
  mkdir -p $DD/ups

  local RC1
  local RC1

  # Install header files
  find KinKal -name \*.hh -exec cp --parents {} $DD/include/ \;
  RC1=$?
  find KinKal -name \*.h  -exec cp --parents {} $DD/include/ \;
  RC2=$?
  if [[ "$RC1" != "0" || "$RC2" != "0" ]]  ; then
    echo "ERROR - failed to install header files."
    return 2
  fi

  # Install binaries
  tar cf - -C build_prof  bin lib | tar xf - -C $DD/$FQP
  RC1=$?
  tar cf - -C build_debug bin lib | tar xf - -C $DD/$FQD
  RC2=$?
  if [[ "$RC1" != "0" || "$RC2" != "0" ]]  ; then
    echo "ERROR - failed to install binaries."
    return 3
  fi

  # Install source, exclude only the git repo.
  tar cf - KinKal --exclude-vcs | tar xf - -C $DD/source
  RC1=$?
  if [[ "$RC1" != "0" ]]  ; then
    echo "ERROR - failed to install source."
    return 3
  fi

  # install UPS files
#  cat $SOURCEDIR/prd/NULL \
#     | sed 's/REPLACE_UPSVERSION/'$UPSVERSION'/'    \
#     > $DV/NULL

#  cat $SOURCEDIR/prd/codetools.table \
#     | sed 's/REPLACE_UPSVERSION/'$UPSVERSION'/'    \
#     > $DD/ups/codetools.table
#

  # install scripts
#  local RC

  return 0
}

# ********** main **********

echo "Start ... "

PRODUCT=KinKal
KINKAL_TO_UPS_DIR=`dirname $(readlink -f $0)`
SOURCEDIR=`readlink -f $KINKAL_TO_UPS_DIR/..`


DOBUILD=""
DOCLEAN=""
CMAKEVER=""
DOINSTALL=""
NBUILDTHREADS="1"
PRODUCTDIR="$PWD"
ROOTBASEVER=""
DOTEST=""
GITVERSION="foo"


while getopts bCc:d:ij:r:tv:h OPT; do
    case $OPT in
        b)
            export DOBUILD=true
            ;;
        C)  export DOCLEAN=true
            ;;
        c)  export CMAKEVER=$OPTARG
            ;;
        d)
            export PRODUCTDIR=$OPTARG
            ;;
        i)
            export DOINSTALL=true
            echo "Processed install argument ..."
            ;;
        j)  export NBUILDTHREADS=$OPTARG
            ;;
        r)  export ROOTBASEVER=$OPTARG
            ;;
        t)  export DOTEST=true
            ;;
        v)
            export GITVERSION=$OPTARG
            echo "Have gitversion: " $GITVERSION
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            echo unknown option, exiting
	    usage
            exit 1
            ;;
     esac
done

echo "Mark 1"

echo "PRODUCT:       " ${PRODUCT}
echo "KINKAL_TO_UPS_DIR:       " ${KINKAL_TO_UPS_DIR}
echo "SOURCEDIR:     " ${SOURCEDIR}
echo "DOBUILD:       " ${DOBUILD}
echo "DOCLEAN:       " ${DOCLEAN}
echo "CMAKEVER:      " ${CMAKEVER}
echo "DOINSTALL:     " ${DOINSTALL}
echo "PRODUCTDIR:    " ${PRODUCTDIR}
echo "ROOTBASEVER:   " ${ROOTBASEVER}
echo "DOTEST:        " ${DOTEST}
echo "GITVERSION:    " ${GITVERSION}
echo "NBUILDTHREADS: " ${NBUILDTHREADS}

if ! checkConfiguration ; then
  usage
  exit 2
fi

if [ -n "$DOBUILD" ]; then
  if ! getCode ; then
    exit 3
  fi
  export ROOTVER=${ROOTBASEVER}
  ${KINKAL_TO_UPS_DIR}/build_one_version
  if [[ "$?" != "0" ]]; then
     exit 4
  fi
  echo "Old rootver: " $ROOTVER
  export ROOTVER=`echo ${ROOTBASEVER} | sed 's/prof/debug/'`
  echo "New rootver: " $ROOTVER
  ${KINKAL_TO_UPS_DIR}/build_one_version
  if [[ "$?" != "0" ]]; then
     exit 5
  fi
fi

if [ -n "$DOINSTALL" ]; then
  if ! install ; then
    exit 6
  fi
fi

if [ -n "$DOCLEAN" ]; then
  if ! clean ; then
    exit 7
  fi
fi

echo "KinKal_build completed with status 0"
exit 0
